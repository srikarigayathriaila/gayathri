class Solution:
    def maxIncreasingSubarrays(self, nums):
        n = len(nums)
        if n < 2:
            return 0
        left = [1] * n
        right = [1] * n
        # Compute lengths of increasing subarrays ending at each index
        for i in range(1, n):
            if nums[i] > nums[i - 1]:
                left[i] = left[i - 1] + 1
        # Compute lengths of increasing subarrays starting at each index
        for i in range(n - 2, -1, -1):
            if nums[i] < nums[i + 1]:
                right[i] = right[i + 1] + 1
        # Find maximum k such that two adjacent subarrays of length k exist
        ans = 0
        for i in range(n - 1):
            ans = max(ans, min(left[i], right[i + 1]))
        return ans
