from collections import deque

class Solution:
    def orangesRotting(self, grid):
        rows, cols = len(grid), len(grid[0])
        q = deque()
        fresh = 0
        # Step 1: Initialize the queue with all initially rotten oranges
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == 2:
                    q.append((r, c, 0))  # (row, col, time)
                elif grid[r][c] == 1:
                    fresh += 1
        # Step 2: BFS traversal to spread rot
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
        minutes = 0
        while q:
            r, c, time = q.popleft()
            minutes = max(minutes, time)
            for dr, dc in directions:
                nr, nc = r + dr, c + dc
                # If neighbor is fresh, rot it and push into queue
                if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 1:
                    grid[nr][nc] = 2
                    fresh -= 1
                    q.append((nr, nc, time + 1))
        # Step 3: If there are still fresh oranges, return -1
        return minutes if fresh == 0 else -1
